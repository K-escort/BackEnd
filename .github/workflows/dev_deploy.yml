name: escort CI/CD

on:
  pull_request:
    branches:
      - release
    types: [closed]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Spring repo
        uses: actions/checkout@v2
        with:
          path: spring

      - name: Checkout AI repo
        uses: actions/checkout@v2
        with:
          repository: K-escort/Python
          token: ${{ secrets.ACCESS_REPO_TOKEN }}
          path: ai
          ref: main

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACTION_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACTION_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Grant execute permission for gradlew
        run: chmod +x spring/gradlew
        shell: bash

      - name: Build with Gradle
        run: cd spring && ./gradlew clean build -x test
        shell: bash

      - name: Check JAR file existence
        run: ls -la spring/build/libs
        shell: bash

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Spring image to Amazon ECR
        id: build-spring-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: escort-dev
          IMAGE_TAG: latest
        run: |
          docker buildx build --platform=linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:spring-$IMAGE_TAG -f spring/Dockerfile spring
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:spring-$IMAGE_TAG
          echo "::set-output name=spring-image::$ECR_REGISTRY/$ECR_REPOSITORY:spring-$IMAGE_TAG"
        shell: bash

      - name: Build, tag, and push AI image to Amazon ECR
        id: build-ai-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: escort-dev
          IMAGE_TAG: latest
        run: |
          docker buildx build --platform=linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:ai-$IMAGE_TAG -f ai/Dockerfile ai
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:ai-$IMAGE_TAG
          echo "::set-output name=ai-image::$ECR_REGISTRY/$ECR_REPOSITORY:ai-$IMAGE_TAG"
        shell: bash

      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      - name: Show Current Time
        run: echo "CurrentTime=${{ steps.current-time.outputs.formattedTime }}"
        shell: bash

      - name: Generate deployment package
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: escort-dev
          IMAGE_TAG: latest
        run: |
          mkdir -p deploy
          cat <<EOF > deploy/Dockerrun.aws.json
          {
            "AWSEBDockerrunVersion": 2,
            "containerDefinitions": [
              {
                "name": "spring-app",
                "image": "$ECR_REGISTRY/$ECR_REPOSITORY:spring-$IMAGE_TAG",
                "essential": true,
                "memory": 512,
                "portMappings": [
                  {
                    "hostPort": 8080,
                    "containerPort": 8080
                  }
                ]
              },
              {
                "name": "ai-app",
                "image": "$ECR_REGISTRY/$ECR_REPOSITORY:ai-$IMAGE_TAG",
                "essential": true,
                "memory": 512,
                "portMappings": [
                  {
                    "hostPort": 5000,
                    "containerPort": 5000
                  }
                ]
              }
            ]
          }
          EOF
          cp -r spring/.ebextensions_release deploy/.ebextensions 2>/dev/null || echo "No .ebextensions_release found, skipping."
          cd deploy && zip -r deploy.zip .

      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACTION_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_ACTION_SECRET_ACCESS_KEY }}
          application_name: escort-docker-dev
          environment_name: Escort-docker-dev-env
          version_label: github-action-${{ steps.current-time.outputs.formattedTime }}
          region: ap-northeast-2
          deployment_package: deploy/deploy.zip
          wait_for_deployment: false
